import { trackCli } from "gatsby-telemetry";
import { ScriptStrategy, resolveInlineScript } from "./gatsby-script";
export let ScriptTelemetryLabel;

(function (ScriptTelemetryLabel) {
  ScriptTelemetryLabel["strategy"] = "GATSBY_SCRIPT_STRATEGY";
  ScriptTelemetryLabel["type"] = "GATSBY_SCRIPT_TYPE";
  ScriptTelemetryLabel["callbacks"] = "GATSBY_SCRIPT_CALLBACKS";
})(ScriptTelemetryLabel || (ScriptTelemetryLabel = {}));

export let ScriptTelemetryType;

(function (ScriptTelemetryType) {
  ScriptTelemetryType["src"] = "SCRIPT_WITH_SRC";
  ScriptTelemetryType["inline"] = "INLINE_SCRIPT";
})(ScriptTelemetryType || (ScriptTelemetryType = {}));

export function collectTelemetry(props = {}) {
  const {
    src,
    strategy = ScriptStrategy.postHydrate,
    onLoad,
    onError
  } = props;
  const inlineScript = resolveInlineScript(props);
  trackCli(ScriptTelemetryLabel.strategy, {
    valueString: strategy
  });
  let type = `UNKNOWN`;

  if (src) {
    type = ScriptTelemetryType.src;
  } else if (inlineScript) {
    type = ScriptTelemetryType.inline;
  }

  if (type !== `UNKNOWN`) {
    trackCli(ScriptTelemetryLabel.type, {
      valueString: type
    });
  }

  const callbacks = [];

  if (onLoad) {
    callbacks.push(`onLoad`);
  }

  if (onError) {
    callbacks.push(`onError`);
  }

  if (callbacks.length) {
    trackCli(ScriptTelemetryLabel.callbacks, {
      valueStringArray: callbacks
    });
  }
}