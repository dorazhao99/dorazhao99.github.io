{"expireTime":9007200876888616000,"key":"gatsby-plugin-mdx-entire-payload-75736fd7769ff54c474c77779c2c2294-","val":{"mdast":{"type":"root","children":[{"type":"import","value":"import SpotifyPlayer from \"./SpotifyPlayer\";","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":45,"offset":45},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Here will a React component go:","position":{"start":{"line":4,"column":1,"offset":47},"end":{"line":4,"column":32,"offset":78},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":47},"end":{"line":4,"column":32,"offset":78},"indent":[]}},{"type":"jsx","value":"<SpotifyPlayer\n  uri=\"spotify:user:bbcamerica:playlist:3w18u69NplCpXVG4fQG726\"\n  size=\"large\"\n  theme=\"black\"\n  view=\"list\"\n/>","position":{"start":{"line":6,"column":1,"offset":80},"end":{"line":11,"column":3,"offset":206},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here will a live code example go:","position":{"start":{"line":13,"column":1,"offset":208},"end":{"line":13,"column":34,"offset":241},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":208},"end":{"line":13,"column":34,"offset":241},"indent":[]}},{"type":"code","lang":"js","meta":"react-live","value":"const onClick = () => {\n  alert(\"You opened me\");\n};\nrender(<button onClick={onClick}>Alohomora!</button>);","position":{"start":{"line":15,"column":1,"offset":243},"end":{"line":20,"column":4,"offset":371},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here will a normal code block go:","position":{"start":{"line":22,"column":1,"offset":373},"end":{"line":22,"column":34,"offset":406},"indent":[]}}],"position":{"start":{"line":22,"column":1,"offset":373},"end":{"line":22,"column":34,"offset":406},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"(function() {\n\nvar cache = {};\nvar form = $('form');\nvar minified = true;\n\nvar dependencies = {};\n\nvar treeURL = 'https://api.github.com/repos/PrismJS/prism/git/trees/gh-pages?recursive=1';\nvar treePromise = new Promise(function(resolve) {\n\t$u.xhr({\n\t\turl: treeURL,\n\t\tcallback: function(xhr) {\n\t\t\tif (xhr.status < 400) {\n\t\t\t\tresolve(JSON.parse(xhr.responseText).tree);\n\t\t\t}\n\t\t}\n\t});\n});","position":{"start":{"line":24,"column":1,"offset":408},"end":{"line":44,"column":4,"offset":804},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"A code block with a JSDoc comment, short, and long comment:","position":{"start":{"line":46,"column":1,"offset":806},"end":{"line":46,"column":60,"offset":865},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":806},"end":{"line":46,"column":60,"offset":865},"indent":[]}},{"type":"code","lang":"js","meta":null,"value":"/**\n * Get value out of string (e.g. rem => px)\n * If value is px strip the px part\n * If the input is already a number only return that value\n * @param {string | number} input\n * @param {number} [rootFontSize]\n * @return {number} Number without last three characters\n * @example removeLastThree('6rem') => 6\n */\nconst getValue = (input, rootFontSize = 16) => {\n  if (typeof input === `number`) {\n    return input / rootFontSize;\n  }\n\n  const isPxValue = input.slice(-2) === `px`;\n\n  if (isPxValue) {\n    return parseFloat(input.slice(0, -2));\n  }\n\n  return parseFloat(input.slice(0, -3));\n};\n\n// This is a little helper function\nconst helper = (a, b) => a + b;\n\n// This is also a little helper function but this time with a really long one-line comment that should show some more details\nconst morehelper = (a, b) => a * b;\n\nexport { getValue, helper, morehelper };","position":{"start":{"line":48,"column":1,"offset":867},"end":{"line":79,"column":4,"offset":1743},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Normal block without language:","position":{"start":{"line":81,"column":1,"offset":1745},"end":{"line":81,"column":31,"offset":1775},"indent":[]}}],"position":{"start":{"line":81,"column":1,"offset":1745},"end":{"line":81,"column":31,"offset":1775},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"import Test from \"../components/test\"\n\nconst Layout = ({ children }) => (\n  <Test>\n    {children}\n  </Test>\n)\n\nexport default Layout","position":{"start":{"line":83,"column":1,"offset":1777},"end":{"line":93,"column":4,"offset":1917},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Code block with code highlighting:","position":{"start":{"line":95,"column":1,"offset":1919},"end":{"line":95,"column":35,"offset":1953},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":1919},"end":{"line":95,"column":35,"offset":1953},"indent":[]}},{"type":"code","lang":"jsx:title=src/components/post.jsx","meta":"{5-7,10}","value":"import React from \"react\";\n\nconst Post = ({ data: { post } }) => (\n  <Layout>\n    <Heading variant=\"h2\" as=\"h2\">\n      {post.title}\n    </Heading>\n    <p\n      sx={{\n        color: `secondary`,\n        mt: 3,\n        a: { color: `secondary` },\n        fontSize: [1, 1, 2],\n      }}\n    >\n      <span>{post.date}</span>\n      {post.tags && (\n        <React.Fragment>\n          {` â€” `}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n    <section\n      sx={{\n        ...CodeStyles,\n        my: 5,\n        \".gatsby-resp-image-wrapper\": { my: 5, boxShadow: `lg` },\n      }}\n    >\n      <MDXRenderer>{post.body}</MDXRenderer>\n    </section>\n  </Layout>\n);\n\nexport default Post;","position":{"start":{"line":97,"column":1,"offset":1955},"end":{"line":134,"column":4,"offset":2713},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Code block without title:","position":{"start":{"line":136,"column":1,"offset":2715},"end":{"line":136,"column":26,"offset":2740},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":2715},"end":{"line":136,"column":26,"offset":2740},"indent":[]}},{"type":"code","lang":null,"meta":null,"value":"Harry Potter and the Philosopher's Stone","position":{"start":{"line":138,"column":1,"offset":2742},"end":{"line":140,"column":4,"offset":2790},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Code block without lineNumbers (but lang):","position":{"start":{"line":142,"column":1,"offset":2792},"end":{"line":142,"column":43,"offset":2834},"indent":[]}}],"position":{"start":{"line":142,"column":1,"offset":2792},"end":{"line":142,"column":43,"offset":2834},"indent":[]}},{"type":"code","lang":"text","meta":"noLineNumbers","value":"Harry Potter and the Chamber of Secrets","position":{"start":{"line":144,"column":1,"offset":2836},"end":{"line":146,"column":4,"offset":2901},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Code block without lineNumbers (and without lang):","position":{"start":{"line":148,"column":1,"offset":2903},"end":{"line":148,"column":51,"offset":2953},"indent":[]}}],"position":{"start":{"line":148,"column":1,"offset":2903},"end":{"line":148,"column":51,"offset":2953},"indent":[]}},{"type":"code","lang":"noLineNumbers","meta":null,"value":"Harry Potter and the Chamber of Secrets","position":{"start":{"line":150,"column":1,"offset":2955},"end":{"line":152,"column":4,"offset":3015},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Code block with only the title:","position":{"start":{"line":154,"column":1,"offset":3017},"end":{"line":154,"column":32,"offset":3048},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":3017},"end":{"line":154,"column":32,"offset":3048},"indent":[]}},{"type":"code","lang":":title=src/utils/scream.js","meta":null,"value":"const scream = (input) => window.alert(input)","position":{"start":{"line":156,"column":1,"offset":3050},"end":{"line":158,"column":4,"offset":3129},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Code block with only the title but without lineNumbers:","position":{"start":{"line":160,"column":1,"offset":3131},"end":{"line":160,"column":56,"offset":3186},"indent":[]}}],"position":{"start":{"line":160,"column":1,"offset":3131},"end":{"line":160,"column":56,"offset":3186},"indent":[]}},{"type":"code","lang":":title=src/utils/scream.js","meta":"noLineNumbers","value":"const scream = (input) => window.alert(input)","position":{"start":{"line":162,"column":1,"offset":3188},"end":{"line":164,"column":4,"offset":3281},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Line highlighting without code title:","position":{"start":{"line":166,"column":1,"offset":3283},"end":{"line":166,"column":38,"offset":3320},"indent":[]}}],"position":{"start":{"line":166,"column":1,"offset":3283},"end":{"line":166,"column":38,"offset":3320},"indent":[]}},{"type":"code","lang":"js","meta":"{2,4-5}","value":"const test = 3;\nconst foo = \"bar\";\nconst harry = \"potter\";\nconst hermione = \"granger\";\nconst ron = \"weasley\";","position":{"start":{"line":168,"column":1,"offset":3322},"end":{"line":174,"column":4,"offset":3449},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"Here will ","position":{"start":{"line":176,"column":1,"offset":3451},"end":{"line":176,"column":11,"offset":3461},"indent":[]}},{"type":"inlineCode","value":"inline code","position":{"start":{"line":176,"column":11,"offset":3461},"end":{"line":176,"column":24,"offset":3474},"indent":[]}},{"type":"text","value":" go, just inside the text. Wow!","position":{"start":{"line":176,"column":24,"offset":3474},"end":{"line":176,"column":55,"offset":3505},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":3451},"end":{"line":176,"column":55,"offset":3505},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Code block without line numbers but with highlighting, language, and title:","position":{"start":{"line":178,"column":1,"offset":3507},"end":{"line":178,"column":76,"offset":3582},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":3507},"end":{"line":178,"column":76,"offset":3582},"indent":[]}},{"type":"code","lang":"tsx:title=src/components/blog.tsx","meta":"{7-9,16} noLineNumbers","value":"import React from \"react\";\n\nconst Blog = ({ posts }: PostsProps) => {\n  const { tagsPath, basePath } = useSiteMetadata();\n\n  return (\n    <Layout>\n      <Flex sx={{ alignItems: `center`, justifyContent: `space-between` }}>\n        <Heading variant=\"h2\" as=\"h2\">\n          Blog\n        </Heading>\n        <Styled.a\n          as={Link}\n          sx={{ variant: `links.secondary` }}\n          to={`/${basePath}/${tagsPath}`.replace(/\\/\\/+/g, `/`)}\n        >\n          View all tags\n        </Styled.a>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  );\n};\n\nexport default Blog;","position":{"start":{"line":180,"column":1,"offset":3584},"end":{"line":206,"column":4,"offset":4256},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"export","value":"export const _frontmatter = {\"title\":\"Fantastic Beasts and Where to Find Them\",\"date\":\"2019-11-01T00:00:00.000Z\",\"tags\":[\"Novel\"]}","position":{"start":{"line":209,"column":1,"offset":4259},"end":{"line":209,"column":131,"offset":4389},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":209,"column":131,"offset":4389}}},"scopeImports":["import SpotifyPlayer from \"./SpotifyPlayer\";","import * as React from 'react'"],"scopeIdentifiers":["SpotifyPlayer","React"],"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Fantastic Beasts and Where to Find Them\",\n  \"date\": \"2019-11-01T00:00:00.000Z\",\n  \"tags\": [\"Novel\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"Here will a React component go:\"), mdx(SpotifyPlayer, {\n    uri: \"spotify:user:bbcamerica:playlist:3w18u69NplCpXVG4fQG726\",\n    size: \"large\",\n    theme: \"black\",\n    view: \"list\",\n    mdxType: \"SpotifyPlayer\"\n  }), mdx(\"p\", null, \"Here will a live code example go:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"react-live\",\n    \"react-live\": true\n  }, \"const onClick = () => {\\n  alert(\\\"You opened me\\\");\\n};\\nrender(<button onClick={onClick}>Alohomora!</button>);\\n\")), mdx(\"p\", null, \"Here will a normal code block go:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"(function() {\\n\\nvar cache = {};\\nvar form = $('form');\\nvar minified = true;\\n\\nvar dependencies = {};\\n\\nvar treeURL = 'https://api.github.com/repos/PrismJS/prism/git/trees/gh-pages?recursive=1';\\nvar treePromise = new Promise(function(resolve) {\\n    $u.xhr({\\n        url: treeURL,\\n        callback: function(xhr) {\\n            if (xhr.status < 400) {\\n                resolve(JSON.parse(xhr.responseText).tree);\\n            }\\n        }\\n    });\\n});\\n\")), mdx(\"p\", null, \"A code block with a JSDoc comment, short, and long comment:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"/**\\n * Get value out of string (e.g. rem => px)\\n * If value is px strip the px part\\n * If the input is already a number only return that value\\n * @param {string | number} input\\n * @param {number} [rootFontSize]\\n * @return {number} Number without last three characters\\n * @example removeLastThree('6rem') => 6\\n */\\nconst getValue = (input, rootFontSize = 16) => {\\n  if (typeof input === `number`) {\\n    return input / rootFontSize;\\n  }\\n\\n  const isPxValue = input.slice(-2) === `px`;\\n\\n  if (isPxValue) {\\n    return parseFloat(input.slice(0, -2));\\n  }\\n\\n  return parseFloat(input.slice(0, -3));\\n};\\n\\n// This is a little helper function\\nconst helper = (a, b) => a + b;\\n\\n// This is also a little helper function but this time with a really long one-line comment that should show some more details\\nconst morehelper = (a, b) => a * b;\\n\\nexport { getValue, helper, morehelper };\\n\")), mdx(\"p\", null, \"Normal block without language:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"import Test from \\\"../components/test\\\"\\n\\nconst Layout = ({ children }) => (\\n  <Test>\\n    {children}\\n  </Test>\\n)\\n\\nexport default Layout\\n\")), mdx(\"p\", null, \"Code block with code highlighting:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-jsx:title=src/components/post.jsx\",\n    \"metastring\": \"{5-7,10}\",\n    \"{5-7,10}\": true\n  }, \"import React from \\\"react\\\";\\n\\nconst Post = ({ data: { post } }) => (\\n  <Layout>\\n    <Heading variant=\\\"h2\\\" as=\\\"h2\\\">\\n      {post.title}\\n    </Heading>\\n    <p\\n      sx={{\\n        color: `secondary`,\\n        mt: 3,\\n        a: { color: `secondary` },\\n        fontSize: [1, 1, 2],\\n      }}\\n    >\\n      <span>{post.date}</span>\\n      {post.tags && (\\n        <React.Fragment>\\n          {` \\u2014 `}\\n          <ItemTags tags={post.tags} />\\n        </React.Fragment>\\n      )}\\n    </p>\\n    <section\\n      sx={{\\n        ...CodeStyles,\\n        my: 5,\\n        \\\".gatsby-resp-image-wrapper\\\": { my: 5, boxShadow: `lg` },\\n      }}\\n    >\\n      <MDXRenderer>{post.body}</MDXRenderer>\\n    </section>\\n  </Layout>\\n);\\n\\nexport default Post;\\n\")), mdx(\"p\", null, \"Code block without title:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"Harry Potter and the Philosopher's Stone\\n\")), mdx(\"p\", null, \"Code block without lineNumbers (but lang):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-text\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }, \"Harry Potter and the Chamber of Secrets\\n\")), mdx(\"p\", null, \"Code block without lineNumbers (and without lang):\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-noLineNumbers\"\n  }, \"Harry Potter and the Chamber of Secrets\\n\")), mdx(\"p\", null, \"Code block with only the title:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-:title=src/utils/scream.js\"\n  }, \"const scream = (input) => window.alert(input)\\n\")), mdx(\"p\", null, \"Code block with only the title but without lineNumbers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-:title=src/utils/scream.js\",\n    \"metastring\": \"noLineNumbers\",\n    \"noLineNumbers\": true\n  }, \"const scream = (input) => window.alert(input)\\n\")), mdx(\"p\", null, \"Line highlighting without code title:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"{2,4-5}\",\n    \"{2,4-5}\": true\n  }, \"const test = 3;\\nconst foo = \\\"bar\\\";\\nconst harry = \\\"potter\\\";\\nconst hermione = \\\"granger\\\";\\nconst ron = \\\"weasley\\\";\\n\")), mdx(\"p\", null, \"Here will \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"inline code\"), \" go, just inside the text. Wow!\"), mdx(\"p\", null, \"Code block without line numbers but with highlighting, language, and title:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx:title=src/components/blog.tsx\",\n    \"metastring\": \"{7-9,16} noLineNumbers\",\n    \"{7-9,16}\": true,\n    \"noLineNumbers\": true\n  }, \"import React from \\\"react\\\";\\n\\nconst Blog = ({ posts }: PostsProps) => {\\n  const { tagsPath, basePath } = useSiteMetadata();\\n\\n  return (\\n    <Layout>\\n      <Flex sx={{ alignItems: `center`, justifyContent: `space-between` }}>\\n        <Heading variant=\\\"h2\\\" as=\\\"h2\\\">\\n          Blog\\n        </Heading>\\n        <Styled.a\\n          as={Link}\\n          sx={{ variant: `links.secondary` }}\\n          to={`/${basePath}/${tagsPath}`.replace(/\\\\/\\\\/+/g, `/`)}\\n        >\\n          View all tags\\n        </Styled.a>\\n      </Flex>\\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\\n    </Layout>\\n  );\\n};\\n\\nexport default Blog;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","rawMDXOutput":"/* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport SpotifyPlayer from \"./SpotifyPlayer\";\nexport const _frontmatter = {\n  \"title\": \"Fantastic Beasts and Where to Find Them\",\n  \"date\": \"2019-11-01T00:00:00.000Z\",\n  \"tags\": [\"Novel\"]\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\"\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n    <p>{`Here will a React component go:`}</p>\n    <SpotifyPlayer uri=\"spotify:user:bbcamerica:playlist:3w18u69NplCpXVG4fQG726\" size=\"large\" theme=\"black\" view=\"list\" mdxType=\"SpotifyPlayer\" />\n    <p>{`Here will a live code example go:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"react-live\",\n        \"react-live\": true\n      }}>{`const onClick = () => {\n  alert(\"You opened me\");\n};\nrender(<button onClick={onClick}>Alohomora!</button>);\n`}</code></pre>\n    <p>{`Here will a normal code block go:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`(function() {\n\nvar cache = {};\nvar form = $('form');\nvar minified = true;\n\nvar dependencies = {};\n\nvar treeURL = 'https://api.github.com/repos/PrismJS/prism/git/trees/gh-pages?recursive=1';\nvar treePromise = new Promise(function(resolve) {\n    $u.xhr({\n        url: treeURL,\n        callback: function(xhr) {\n            if (xhr.status < 400) {\n                resolve(JSON.parse(xhr.responseText).tree);\n            }\n        }\n    });\n});\n`}</code></pre>\n    <p>{`A code block with a JSDoc comment, short, and long comment:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`/**\n * Get value out of string (e.g. rem => px)\n * If value is px strip the px part\n * If the input is already a number only return that value\n * @param {string | number} input\n * @param {number} [rootFontSize]\n * @return {number} Number without last three characters\n * @example removeLastThree('6rem') => 6\n */\nconst getValue = (input, rootFontSize = 16) => {\n  if (typeof input === \\`number\\`) {\n    return input / rootFontSize;\n  }\n\n  const isPxValue = input.slice(-2) === \\`px\\`;\n\n  if (isPxValue) {\n    return parseFloat(input.slice(0, -2));\n  }\n\n  return parseFloat(input.slice(0, -3));\n};\n\n// This is a little helper function\nconst helper = (a, b) => a + b;\n\n// This is also a little helper function but this time with a really long one-line comment that should show some more details\nconst morehelper = (a, b) => a * b;\n\nexport { getValue, helper, morehelper };\n`}</code></pre>\n    <p>{`Normal block without language:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`import Test from \"../components/test\"\n\nconst Layout = ({ children }) => (\n  <Test>\n    {children}\n  </Test>\n)\n\nexport default Layout\n`}</code></pre>\n    <p>{`Code block with code highlighting:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx:title=src/components/post.jsx\",\n        \"metastring\": \"{5-7,10}\",\n        \"{5-7,10}\": true\n      }}>{`import React from \"react\";\n\nconst Post = ({ data: { post } }) => (\n  <Layout>\n    <Heading variant=\"h2\" as=\"h2\">\n      {post.title}\n    </Heading>\n    <p\n      sx={{\n        color: \\`secondary\\`,\n        mt: 3,\n        a: { color: \\`secondary\\` },\n        fontSize: [1, 1, 2],\n      }}\n    >\n      <span>{post.date}</span>\n      {post.tags && (\n        <React.Fragment>\n          {\\` â€” \\`}\n          <ItemTags tags={post.tags} />\n        </React.Fragment>\n      )}\n    </p>\n    <section\n      sx={{\n        ...CodeStyles,\n        my: 5,\n        \".gatsby-resp-image-wrapper\": { my: 5, boxShadow: \\`lg\\` },\n      }}\n    >\n      <MDXRenderer>{post.body}</MDXRenderer>\n    </section>\n  </Layout>\n);\n\nexport default Post;\n`}</code></pre>\n    <p>{`Code block without title:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`Harry Potter and the Philosopher's Stone\n`}</code></pre>\n    <p>{`Code block without lineNumbers (but lang):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-text\",\n        \"metastring\": \"noLineNumbers\",\n        \"noLineNumbers\": true\n      }}>{`Harry Potter and the Chamber of Secrets\n`}</code></pre>\n    <p>{`Code block without lineNumbers (and without lang):`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-noLineNumbers\"\n      }}>{`Harry Potter and the Chamber of Secrets\n`}</code></pre>\n    <p>{`Code block with only the title:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-:title=src/utils/scream.js\"\n      }}>{`const scream = (input) => window.alert(input)\n`}</code></pre>\n    <p>{`Code block with only the title but without lineNumbers:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-:title=src/utils/scream.js\",\n        \"metastring\": \"noLineNumbers\",\n        \"noLineNumbers\": true\n      }}>{`const scream = (input) => window.alert(input)\n`}</code></pre>\n    <p>{`Line highlighting without code title:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\",\n        \"metastring\": \"{2,4-5}\",\n        \"{2,4-5}\": true\n      }}>{`const test = 3;\nconst foo = \"bar\";\nconst harry = \"potter\";\nconst hermione = \"granger\";\nconst ron = \"weasley\";\n`}</code></pre>\n    <p>{`Here will `}<inlineCode parentName=\"p\">{`inline code`}</inlineCode>{` go, just inside the text. Wow!`}</p>\n    <p>{`Code block without line numbers but with highlighting, language, and title:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-tsx:title=src/components/blog.tsx\",\n        \"metastring\": \"{7-9,16} noLineNumbers\",\n        \"{7-9,16}\": true,\n        \"noLineNumbers\": true\n      }}>{`import React from \"react\";\n\nconst Blog = ({ posts }: PostsProps) => {\n  const { tagsPath, basePath } = useSiteMetadata();\n\n  return (\n    <Layout>\n      <Flex sx={{ alignItems: \\`center\\`, justifyContent: \\`space-between\\` }}>\n        <Heading variant=\"h2\" as=\"h2\">\n          Blog\n        </Heading>\n        <Styled.a\n          as={Link}\n          sx={{ variant: \\`links.secondary\\` }}\n          to={\\`/\\${basePath}/\\${tagsPath}\\`.replace(/\\\\/\\\\/+/g, \\`/\\`)}\n        >\n          View all tags\n        </Styled.a>\n      </Flex>\n      <Listing posts={posts} sx={{ mt: [4, 5] }} />\n    </Layout>\n  );\n};\n\nexport default Blog;\n`}</code></pre>\n\n    </MDXLayout>;\n}\n\n;\nMDXContent.isMDXComponent = true;"}}